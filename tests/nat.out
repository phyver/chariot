>> functions in environment:
val
   add : nat → nat → nat
    | add n Zero = n
    | add n (Succ m) = Succ (add n m)

val
   mult : nat → nat → nat
    | mult n Zero = Zero
    | mult n (Succ m) = add n (mult n m)

val
   pow : nat → nat → nat
    | pow n Zero = Succ Zero
    | pow n (Succ m) = mult n (pow n m)

>> functions in environment:
val
   add : nat → nat → nat
    | n+0 = n
    | n+(m+1) = n+m+1

val
   mult : nat → nat → nat
    | mult n 0 = 0
    | mult n (m+1) = n+(mult n m)

val
   pow : nat → nat → nat
    | pow n 0 = 1
    | pow n (m+1) = mult n (pow n m)

>> term: 15
>> result: 15
>> of type: nat

>> term: pow 2 (pow 2 2)
>> result: 16
>> of type: nat

>> term: mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ Zero))))))))))) (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ Zero)))))))))))
>> result: Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ Zero))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
>> of type: nat

val
   ack : nat → nat → nat
    | ack Zero n = Succ n
    | ack (Succ m) Zero = ack m (Succ Zero)
    | ack (Succ m) (Succ n) = ack m (ack (Succ m) n)

