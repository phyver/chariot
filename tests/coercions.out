>> option verbose is set to 1
>> option continue_on_error is set to true
>> inductive type nat was succesfully defined
>> inductive type list was succesfully defined
>> Typing for map_2, map_1 successful
>> the definition for map_1 is complete
>> the definition for map_2 is complete
>> the definitions map_2, map_1 are provably correct

>> Typing for map1_2, map1_1 successful
>> the definition for map1_1 is complete
>> the definition for map1_2 is complete
>> the definitions map1_2, map1_1 are provably correct

>> Typing for map2_2, map2_1 successful
>> the definition for map2_1 is complete
>> the definition for map2_2 is complete
>> the definitions map2_2, map2_1 are provably correct

** error: function map3_1 cannot be coerced to type ('a → 'b) → list('a) → list('b)
** error: function map4_2 cannot be coerced to type ('a → 'b) → list('a) → list('b)
>> functions in environment:
val
   map_1 : ('a → 'b) → list('a) → list('b)
    | map_1 f [] = []
    | map_1 f (x::xs) = (f x)::(map_2 f xs)
and
   map_2 : ('a → 'b) → list('a) → list('b)
    | map_2 f [] = []
    | map_2 f (x::xs) = (f x)::(map_1 f xs)

val
   map1_1 : ('a → 'b) → list('a) → list('b)
    | map1_1 f [] = []
    | map1_1 f (x::xs) = (f x)::(map1_2 f xs)
and
   map1_2 : ('a → 'b) → list('a) → list('b)
    | map1_2 f [] = []
    | map1_2 f (x::xs) = (f x)::(map1_1 f xs)

val
   map2_1 : (nat → nat) → list(nat) → list(nat)
    | map2_1 f [] = []
    | map2_1 f (x::xs) = (f x)::(map2_2 f xs)
and
   map2_2 : (nat → nat) → list(nat) → list(nat)
    | map2_2 f [] = []
    | map2_2 f (x::xs) = (f x)::(map2_1 f xs)

