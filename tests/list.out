>> option verbose is set to 1
>> option show_priorities is set to false
>> inductive type list was succesfully defined
>> inductive type nat was succesfully defined
>> Typing for add successful
>> the definition for add is complete
>> the definition add is provably correct

>> Typing for mult successful
>> the definition for mult is complete
>> the definition mult is provably correct

>> Typing for pow successful
>> the definition for pow is complete
>> the definition pow is provably correct

>> Typing for length successful
>> the definition for length is complete
>> the definition length is provably correct

>> Typing for map successful
>> the definition for map is complete
>> the definition map is provably correct

>> Typing for decr successful
>> the definition for decr is complete
>> the definition decr is provably correct

>> Typing for rev_append successful
>> the definition for rev_append is complete
>> the definition rev_append is provably correct

>> Typing for rev successful
>> the definition for rev is complete
>> the definition rev is provably correct

>> option show_lists is set to false
>> functions in environment:
val
    add : nat → nat → nat
  | add n 0 = n
  | add n (m+1) = (add n m) + 1

val
    mult : nat → nat → nat
  | mult n 0 = 0
  | mult n (m+1) = add n (mult n m)

val
    pow : nat → nat → nat
  | pow n 0 = 1
  | pow n (m+1) = mult n (pow n m)

val
    length : list('x) → nat
  | length Nil = 0
  | length (Cons x xs) = (length xs) + 1

val
    map : ('a → 'b) → list('a) → list('b)
  | map f Nil = Nil
  | map f (Cons x xs) = Cons (f x) (map f xs)

val
    decr : nat → list(nat)
  | decr 0 = Nil
  | decr (n+1) = Cons n (decr n)

val
    rev_append : list('a) → list('a) → list('a)
  | rev_append l Nil = l
  | rev_append l (Cons x xs) = rev_append (Cons x l) xs

val
    rev : list('a) → list('a)
  | rev l = rev_append Nil l

>> option show_lists is set to true
>> functions in environment:
val
    add : nat → nat → nat
  | add n 0 = n
  | add n (m+1) = (add n m) + 1

val
    mult : nat → nat → nat
  | mult n 0 = 0
  | mult n (m+1) = add n (mult n m)

val
    pow : nat → nat → nat
  | pow n 0 = 1
  | pow n (m+1) = mult n (pow n m)

val
    length : list('x) → nat
  | length [] = 0
  | length (x::xs) = (length xs) + 1

val
    map : ('a → 'b) → list('a) → list('b)
  | map f [] = []
  | map f (x::xs) = (f x)::(map f xs)

val
    decr : nat → list(nat)
  | decr 0 = []
  | decr (n+1) = n::(decr n)

val
    rev_append : list('a) → list('a) → list('a)
  | rev_append l [] = l
  | rev_append l (x::xs) = rev_append (x::l) xs

val
    rev : list('a) → list('a)
  | rev l = rev_append [] l

