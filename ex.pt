:prompt ""


data N where Zero : N | Succ : N -> N

data
  List(X) where Nil : List(X)
              | Cons : X -> List(X) -> List(X)
and
  BTree(B,X,Y) where
    | Leaf : Y → BTree(B,X,Y)
    | Node : X → (B → BTree(B,X,Y)) → BTree(B,X,Y)

val length : List(X) -> N
    | length Nil = Z
    | length (Cons x xs) = S (length xs)

codata Stream(X) where
    | Head : Stream(X) -> X
    | Tail : Stream(X) -> Stream(X)

val map : (X -> Y) -> Stream(X) -> Stream(Y)
    | (map f s).Head = f (s.Head)
    | (map f s).Tail = map f s.Tail

:show types




