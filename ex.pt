(* :prompt "" *)


data nat where Zero : nat | Succ : nat -> nat

data
  list('x) where Nil : list('x)
              | Cons : 'x -> list('x) -> list('x)
and
  tree('b,'x,'y) where
    | Leaf : 'y → tree('b,'x,'y)
    | Node : 'x → ('b → tree('b,'x,'y)) → tree('b,'x,'y)

val length : list('x) -> nat
    | length Nil = Zero
    | length (Cons x xs) = Succ (length xs)

codata stream('x) where
    | Head : stream('x) -> 'x
    | Tail : stream('x) -> stream('x)

val map : ('x -> 'y) -> stream('x) -> stream('y)
    | (map f s).Head = f (s.Head)
    | (map f s).Tail = map f s.Tail

:show types

:quit


