
data bool where True : bool | False : bool

data nat where Zero : nat | Succ : nat -> nat

data
  list('x) where Nil : list('x)
              | Cons : 'x -> list('x) -> list('x)

val add : nat -> nat -> nat
    | add n 0 = n
    | add n (m+1) = Succ (add n m)

val mult : nat -> nat -> nat
    | mult n 0 = 0
    | mult n (m+1) = n + (mult n m)

val pow : nat -> nat -> nat
    | pow n 0 = 1
    | pow n (m+1) = mult n (pow n m)


